GENERAL
	- 1 OK

AUTHENTICATION
	- 101 INVALID
	- 102 FAILED_IP_FETCH

TIMEOUTS
	- 201 INIT
	- 202 SERVE
	- 203 FETCH
	- 204

SERVER ERRORS
	- 301 EMPTY_FRONTIER
	- 302 NO_SEED
	- 303 IO_ERROR
	- 304 FAILED_TIMEOUT_SET

MISC ERRORS
	- 401 FAILED_IP_FETCH

REQUEST FORMAT
	- 501 FAILED_INIT_RESPONSE
	- 502 FAILED_SERVE_RESPONSE
	- 503 FAILED_INIT_READ
	- 504 FAILED_AUTH_READ

================
Requests
================
INIT: 			{"request_type": "init", "who": "client/admin"} 
SERVER_RESPONSE: 	{"request_type": "server_response", "code": "XXX"}
BEGIN_AUTH:		{"request_type": "begin_auth"}
AUTH:			{"request_type": "auth", "key": "md5(ip + secret)"}
	valid:   ee7d82ae0c01265a1ed1966d7d2d8f49
	invalid: f631cf0848689e2c0c61d91bb4a1e1d5
AUTH_CONFIRM:		{"request_type": "auth_confirm", "authorised": "true/false"}
	

EXAMPLE:
Req: {"request_type":"init", "who":"client"}
Res: {"request_type":"begin_auth"}
Req: {"request_type":"auth", "key":"f631cf0848689e2c0c61d91bb4a1e1d5"}
Res: {"request_type":"auth_confirm","authorised":"false"}

================
PageFrontier
================

fetchNewPage():
	Let Pe = "Posts empty", let Se = "Sources empty", let Pl = "sources low"

	       Pe | Se | Pl | return
	        0 |  0 |  0 | post
	        0 |  0 |  1 | source
 	        0 |  1 |  0 | post
 	        0 |  1 |  1 | post
 	        1 |  0 |  0 | source
	        1 |  0 |  1 | source
	        1 |  1 |  0 | DEAD (TODO)
	        1 |  1 |  1 | DEAD (TODO)

	      DEAD (null) = (Pe && Se)

	      source = (!Pe && !Se && Pl) || (Pe && !Se && !Pl) || (Pe && !Se && Pl)
	             = !Se && Pl (as Pe => Pl)
	
	      post = else
